// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.TradeVolumes.Client.AutorestClient
{
    using Lykke.Service;
    using Lykke.Service.TradeVolumes;
    using Lykke.Service.TradeVolumes.Client;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TradeVolumesAPI.
    /// </summary>
    public static partial class TradeVolumesAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this ITradeVolumesAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this ITradeVolumesAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Calculates trade volume of assetId within specified time period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// Asset Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            public static object GetPeriodClientAssetTradeVolume(this ITradeVolumesAPI operations, string assetId, string fromDateStr, string toDateStr)
            {
                return operations.GetPeriodClientAssetTradeVolumeAsync(assetId, fromDateStr, toDateStr).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculates trade volume of assetId within specified time period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// Asset Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPeriodClientAssetTradeVolumeAsync(this ITradeVolumesAPI operations, string assetId, string fromDateStr, string toDateStr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPeriodClientAssetTradeVolumeWithHttpMessagesAsync(assetId, fromDateStr, toDateStr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Calculates trade volume of assetPairId within specified time period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// AssetPair Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            public static object GetPeriodClientAssetPairTradeVolume(this ITradeVolumesAPI operations, string assetPairId, string fromDateStr, string toDateStr)
            {
                return operations.GetPeriodClientAssetPairTradeVolumeAsync(assetPairId, fromDateStr, toDateStr).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculates trade volume of assetPairId within specified time period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// AssetPair Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPeriodClientAssetPairTradeVolumeAsync(this ITradeVolumesAPI operations, string assetPairId, string fromDateStr, string toDateStr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPeriodClientAssetPairTradeVolumeWithHttpMessagesAsync(assetPairId, fromDateStr, toDateStr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Calculates trade volume of assetId for clientId within specified time
            /// period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// Asset Id
            /// </param>
            /// <param name='clientId'>
            /// Client Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            public static object GetPeriodClientAssetTradeVolume1(this ITradeVolumesAPI operations, string assetId, string clientId, string fromDateStr, string toDateStr)
            {
                return operations.GetPeriodClientAssetTradeVolume1Async(assetId, clientId, fromDateStr, toDateStr).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculates trade volume of assetId for clientId within specified time
            /// period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// Asset Id
            /// </param>
            /// <param name='clientId'>
            /// Client Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPeriodClientAssetTradeVolume1Async(this ITradeVolumesAPI operations, string assetId, string clientId, string fromDateStr, string toDateStr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPeriodClientAssetTradeVolume1WithHttpMessagesAsync(assetId, clientId, fromDateStr, toDateStr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Calculates trade volume of assetPairId for clientId within specified time
            /// period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// AssetPair Id
            /// </param>
            /// <param name='clientId'>
            /// Client Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            public static object GetPeriodClientAssetPairTradeVolume1(this ITradeVolumesAPI operations, string assetPairId, string clientId, string fromDateStr, string toDateStr)
            {
                return operations.GetPeriodClientAssetPairTradeVolume1Async(assetPairId, clientId, fromDateStr, toDateStr).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Calculates trade volume of assetPairId for clientId within specified time
            /// period.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPairId'>
            /// AssetPair Id
            /// </param>
            /// <param name='clientId'>
            /// Client Id
            /// </param>
            /// <param name='fromDateStr'>
            /// Start DateTime in yyyyMMddHH string format (Inclusive)
            /// </param>
            /// <param name='toDateStr'>
            /// Finish DateTime in yyyyMMddHH string format (Exclusive)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPeriodClientAssetPairTradeVolume1Async(this ITradeVolumesAPI operations, string assetPairId, string clientId, string fromDateStr, string toDateStr, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPeriodClientAssetPairTradeVolume1WithHttpMessagesAsync(assetPairId, clientId, fromDateStr, toDateStr, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
